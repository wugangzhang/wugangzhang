--- filtering_video.c	2022-07-21 01:32:28.000000000 -0700
+++ /home/hades/work/repo/Core/user/xizhan/sws/filtering_video.c	2022-11-09 10:46:00.239791625 -0800
@@ -26,17 +26,30 @@
  * API example for decoding and filtering
  * @example filtering_video.c
  */
-
 #define _XOPEN_SOURCE 600 /* for usleep */
 #include <unistd.h>
 #include <stdio.h>
 #include <stdlib.h>
 
+#ifdef __cplusplus
+extern "C" {
+#endif
 #include <libavcodec/avcodec.h>
 #include <libavformat/avformat.h>
 #include <libavfilter/buffersink.h>
 #include <libavfilter/buffersrc.h>
 #include <libavutil/opt.h>
+#ifdef __cplusplus
+} // extern C
+#endif
+
+#ifdef av_err2str
+#undef av_err2str
+#define av_err2str(errnum)                                                                                             \
+    av_make_error_string(                                                                                              \
+        static_cast<char*>(__builtin_alloca(AV_ERROR_MAX_STRING_SIZE)), AV_ERROR_MAX_STRING_SIZE, errnum)
+#endif // av_err2str
+
 
 const char *filter_descr = "scale=78:24,transpose=cclock";
 /* other way:
@@ -51,7 +64,7 @@
 static int video_stream_index = -1;
 static int64_t last_pts = AV_NOPTS_VALUE;
 
-static int open_input_file(const char *filename)
+static int open_input_file(const char *filename, const bool useNvdec)
 {
     int ret;
     AVCodec *dec;
@@ -66,8 +79,18 @@
         return ret;
     }
 
-    /* select the video stream */
-    ret = av_find_best_stream(fmt_ctx, AVMEDIA_TYPE_VIDEO, -1, -1, &dec, 0);
+    if (useNvdec)
+    {
+        ret = av_find_best_stream(fmt_ctx, AVMEDIA_TYPE_VIDEO, -1, -1, NULL, 0);
+        
+         // Force to use nv hw decoder.
+        dec = avcodec_find_decoder_by_name("h264_nvv4l2dec");
+    }
+    else
+    {
+        /* select the video stream */
+        ret = av_find_best_stream(fmt_ctx, AVMEDIA_TYPE_VIDEO, -1, -1, &dec, 0);
+    }
     if (ret < 0) {
         av_log(NULL, AV_LOG_ERROR, "Cannot find a video stream in the input file\n");
         return ret;
@@ -213,12 +236,19 @@
     AVPacket packet;
     AVFrame *frame;
     AVFrame *filt_frame;
+    int num_of_frame_decoded = 0;
+    bool useNvdec = false;
 
-    if (argc != 2) {
+    if (argc < 2) {
         fprintf(stderr, "Usage: %s file\n", argv[0]);
         exit(1);
     }
 
+    if (argc > 2 )
+    {
+        useNvdec = true;
+    }
+
     frame = av_frame_alloc();
     filt_frame = av_frame_alloc();
     if (!frame || !filt_frame) {
@@ -226,7 +256,7 @@
         exit(1);
     }
 
-    if ((ret = open_input_file(argv[1])) < 0)
+    if ((ret = open_input_file(argv[1], useNvdec)) < 0)
         goto end;
     if ((ret = init_filters(filter_descr)) < 0)
         goto end;
@@ -253,7 +283,7 @@
                 }
 
                 frame->pts = frame->best_effort_timestamp;
-
+                num_of_frame_decoded ++;
                 /* push the decoded frame into the filtergraph */
                 if (av_buffersrc_add_frame_flags(buffersrc_ctx, frame, AV_BUFFERSRC_FLAG_KEEP_REF) < 0) {
                     av_log(NULL, AV_LOG_ERROR, "Error while feeding the filtergraph\n");
@@ -267,7 +297,7 @@
                         break;
                     if (ret < 0)
                         goto end;
-                    display_frame(filt_frame, buffersink_ctx->inputs[0]->time_base);
+                    // display_frame(filt_frame, buffersink_ctx->inputs[0]->time_base);
                     av_frame_unref(filt_frame);
                 }
                 av_frame_unref(frame);
@@ -282,8 +312,9 @@
     av_frame_free(&frame);
     av_frame_free(&filt_frame);
 
+    fprintf(stdout, "Number of frames decoded: %d\n", num_of_frame_decoded);
     if (ret < 0 && ret != AVERROR_EOF) {
-        fprintf(stderr, "Error occurred: %s\n", av_err2str(ret));
+        fprintf(stderr, "Error occurred: %s\n", av_err2str(ret));  // NOLINT
         exit(1);
     }
 
